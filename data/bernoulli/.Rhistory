df$true_class <- factor(df$true_class)
return(df)
}
# The class centroids are on the FB-LR-trend graph are located like this
#
#    1  2  3  4  5
#    6  7  8  9 10
#   11 12 13 14 15
#   16 17 18 19 20
#   21 22 23 24 25
#
# Trying to recreate the class sizes from the experiment
#
class_dist <- c( 20,  4,  0,  3, 30,
4,  1,  0,  0,  0,
0,  0,  1,  0,  0,
5,  0,  0,  1,  0,
25,  2,  0,  0,  1)
# number of classes
sum(class_dist != 0)
# generate the data with numbers from the experiment
n_subjects = 150
obs_per_trial = 2
test_df <- gen_data(n_subjects, obs_per_trial, class_dist)
# type probabilities with individual difference
diff <- rnorm(1,0,0.05)
none <- ifelse(diff<0, 0 ,diff)
low <- ifelse(0.25+diff<0, 0, 0.25+diff)
# type probabilities with individual difference
diff <- rnorm(1,0,0.05)
# type probabilities with individual difference
diff <- rnorm(1,0,0.05)
none <- ifelse(diff<0, 0 ,diff)
low <- ifelse(0.25+diff<0, 0, 0.25+diff)
mid <- 0.5+diff
high <- ifelse(0.75+diff>1, 1, 0.75+diff)
full <- ifelse(diff>1, 1, 1+diff)
library(dplyr)
library(ggplot2)
#################
# Functions
#
#
make_subj <- function(class, obs_per_trial) {
# creates a subject of a given class and with number obs_per_trial for each targetPos
## Creating a class probability distributions
# From what we could see from the analysis is that there seem to be certain types
# for perspective choices also depending on FB and LR trials
# In this work, it is assumed that each subject has an individual percentage to
# take an egocentric perspective for a given FB or LR trial.
# The underlying probabilities for a subject of a certain class, to choose ego-
# centric for front-back and. Each list entry represents a class and works as follows:
# c( P(egocentric|FB), P(egocentric|LR) )
# Assumed are 5 type probabilities: none, low, middle, high and full; representing
# the probability that a subject uses a egocentric perspective for a trial
# type probabilities with individual difference
diff <- rnorm(1,0,0.05)
none <- ifelse(diff<0, 0 ,diff)
low <- ifelse(0.25+diff<0, 0, 0.25+diff)
mid <- 0.5+diff
high <- ifelse(0.75+diff>1, 1, 0.75+diff)
full <- ifelse(diff+1>1, 1, 1+diff)
# this results in 25 possible combination of classes
class_prob <-
list(c(full, none), c(full, low), c(full, mid), c(full, high), c(full, full),
c(high,none),  c(high, low), c(high, mid), c(high, high), c(high, full),
c(mid,none),   c(mid, low),  c(mid, mid),  c(mid, high),  c(mid, full),
c(low, none),  c(low, low),  c(low, mid),  c(low, high),  c(low, full),
c(none, none), c(none, low), c(none, mid), c(none, high), c(none, full))
subj <- c()
nam <- c()
for (pos in c('B', 'F', 'L', 'R')){
p1 <- class_prob[[class]][1]
p2 <- class_prob[[class]][2]
prob <- ifelse(pos == 'B' | pos == 'F', p1, p2)
print(prob)
for (i in 1:obs_per_trial){
vec <- rbinom(1, 1,prob)
nam <- cbind(nam, paste(pos,i,sep = ""))
subj <- cbind(subj,vec)
}
}
subj <- cbind(subj, class)
subj <- cbind(subj, diff)
nam <- cbind(nam, 'true_class')
nam <- cbind(nam, 'diff')
colnames(subj)<- nam
return(subj)
}
gen_data <- function(size, obs_per_trial, c_dist){
# generate the data with given parameters and adds a column true class
# size : how many subjects will be generated
# obs_per_trial : how many trails from the same perspective for each subject
# c_dist : Probability-list of subject being in a certain class (influences number points per cluster)
# c_prob : probabilities for egocentric choice for the classes (influences where the clusters are)
c_dist <- c_dist/sum(c_dist)
n_classes <- length(c_dist)
subject_classes <- sample(seq(25) , size, replace=TRUE, prob=c_dist)
df <- data.frame(matrix(ncol = 4*obs_per_trial, nrow = 0))
for (class in subject_classes){
subj <- make_subj(class, obs_per_trial)
#subj <- c(subj, class)
df <- rbind(df,subj)
}
df<- df %>%
mutate('ego.tend' = rowSums(df)/(4*obs_per_trial))%>%
mutate('FB.tend' = rowSums(df[1:(2*obs_per_trial)])/(2*obs_per_trial))%>%
mutate('LR.tend' = rowSums(df[(2*obs_per_trial+1):(4*obs_per_trial)])/(2*obs_per_trial))
df$true_class <- factor(df$true_class)
return(df)
}
#
#
############
# The class centroids are on the FB-LR-trend graph are located like this
#
#    1  2  3  4  5
#    6  7  8  9 10
#   11 12 13 14 15
#   16 17 18 19 20
#   21 22 23 24 25
#
# Trying to recreate the class sizes from the experiment
#
class_dist <- c( 20,  4,  0,  3, 30,
4,  1,  0,  0,  0,
0,  0,  1,  0,  0,
5,  0,  0,  1,  0,
25,  2,  0,  0,  1)
# number of classes
sum(class_dist != 0)
# generate the data with numbers from the experiment
n_subjects = 150
obs_per_trial = 2
test_df <- gen_data(n_subjects, obs_per_trial, class_dist)
library(dplyr)
library(ggplot2)
#################
# Functions
#
#
make_subj <- function(class, obs_per_trial) {
# creates a subject of a given class and with number obs_per_trial for each targetPos
## Creating a class probability distributions
# From what we could see from the analysis is that there seem to be certain types
# for perspective choices also depending on FB and LR trials
# In this work, it is assumed that each subject has an individual percentage to
# take an egocentric perspective for a given FB or LR trial.
# The underlying probabilities for a subject of a certain class, to choose ego-
# centric for front-back and. Each list entry represents a class and works as follows:
# c( P(egocentric|FB), P(egocentric|LR) )
# Assumed are 5 type probabilities: none, low, middle, high and full; representing
# the probability that a subject uses a egocentric perspective for a trial
# type probabilities with individual difference
diff <- rnorm(1,0,0.05)
none <- ifelse(diff<0, 0 ,diff)
low <- ifelse(0.25+diff<0, 0, 0.25+diff)
mid <- 0.5+diff
high <- ifelse(0.75+diff>1, 1, 0.75+diff)
full <- ifelse(diff+1>1, 1, 1+diff)
# this results in 25 possible combination of classes
class_prob <-
list(c(full, none), c(full, low), c(full, mid), c(full, high), c(full, full),
c(high,none),  c(high, low), c(high, mid), c(high, high), c(high, full),
c(mid,none),   c(mid, low),  c(mid, mid),  c(mid, high),  c(mid, full),
c(low, none),  c(low, low),  c(low, mid),  c(low, high),  c(low, full),
c(none, none), c(none, low), c(none, mid), c(none, high), c(none, full))
subj <- c()
nam <- c()
for (pos in c('B', 'F', 'L', 'R')){
p1 <- class_prob[[class]][1]
p2 <- class_prob[[class]][2]
prob <- ifelse(pos == 'B' | pos == 'F', p1, p2)
for (i in 1:obs_per_trial){
vec <- rbinom(1, 1,prob)
nam <- cbind(nam, paste(pos,i,sep = ""))
subj <- cbind(subj,vec)
}
}
subj <- cbind(subj, class)
subj <- cbind(subj, diff)
nam <- cbind(nam, 'true_class')
nam <- cbind(nam, 'diff')
colnames(subj)<- nam
return(subj)
}
gen_data <- function(size, obs_per_trial, c_dist){
# generate the data with given parameters and adds a column true class
# size : how many subjects will be generated
# obs_per_trial : how many trails from the same perspective for each subject
# c_dist : Probability-list of subject being in a certain class (influences number points per cluster)
# c_prob : probabilities for egocentric choice for the classes (influences where the clusters are)
c_dist <- c_dist/sum(c_dist)
n_classes <- length(c_dist)
subject_classes <- sample(seq(25) , size, replace=TRUE, prob=c_dist)
df <- data.frame(matrix(ncol = 4*obs_per_trial, nrow = 0))
for (class in subject_classes){
subj <- make_subj(class, obs_per_trial)
#subj <- c(subj, class)
df <- rbind(df,subj)
}
df<- df %>%
mutate('ego.tend' = rowSums(df)/(4*obs_per_trial))%>%
mutate('FB.tend' = rowSums(df[1:(2*obs_per_trial)])/(2*obs_per_trial))%>%
mutate('LR.tend' = rowSums(df[(2*obs_per_trial+1):(4*obs_per_trial)])/(2*obs_per_trial))
df$true_class <- factor(df$true_class)
return(df)
}
# The class centroids are on the FB-LR-trend graph are located like this
#
#    1  2  3  4  5
#    6  7  8  9 10
#   11 12 13 14 15
#   16 17 18 19 20
#   21 22 23 24 25
#
# Trying to recreate the class sizes from the experiment
#
class_dist <- c( 20,  4,  0,  3, 30,
4,  1,  0,  0,  0,
0,  0,  1,  0,  0,
5,  0,  0,  1,  0,
25,  2,  0,  0,  1)
# number of classes
sum(class_dist != 0)
# generate the data with numbers from the experiment
n_subjects = 150
obs_per_trial = 2
test_df <- gen_data(n_subjects, obs_per_trial, class_dist)
# Plot with true classes
ggplot(test_df, aes(LR.tend,FB.tend, color=true_class)) +
geom_jitter(width=0.05, height=0.05)+
xlim(-0.1,1.1)+
ylim(-0.1,1.1)
class_dist_animation <-
c( 0,  0,  1,  0,  0,
0,  1,  0,  1,  0,
0,  0,  1,  0,  0,
0,  1,  0,  1,  0,
0,  0,  1,  0,  0)
## Observations per trial
for (obs in c(1,2,4,10,20)){
data_animation_o <- gen_data(n_subjects, obs, class_dist_animation)
Sys.sleep(1) # give the cpu time to build the datasets
ggo <- ggplot(data_animation_o, aes(LR.tend,FB.tend, color=true_class)) +
geom_jitter(width=0.1/obs, height=0.1/obs)+
xlim(-0.1,1.1)+
ylim(-0.1,1.1)+
labs(title = paste(obs, 'Observation per trial'))
print(ggo)
Sys.sleep(0.5)
}
## Number of subjects
for (n_subjects_s in c(100, 200, 500, 1000)){
data_animation_s <- gen_data(n_subjects_s, obs_per_trial, class_dist_animation)
Sys.sleep(1) # give the cpu time to build the datasets
ggs <- ggplot(data_animation_s, aes(LR.tend,FB.tend, color=true_class)) +
geom_jitter(width=0.1/obs_per_trial, height=0.1/obs_per_trial)+
xlim(-0.1,1.1)+
ylim(-0.1,1.1)+
labs(title = paste(n_subjects, 'Subjects'))
print(ggs)
Sys.sleep(0.5)
}
## Combination of both
for (obs_c in c(1,2,5,10, 20)){
for (n_subjects_c in c(100, 200, 500, 1000, 2000)){
data_animation_c <- gen_data(n_subjects_c, obs_c, class_dist_animation)
Sys.sleep(1) # give the cpu time to build the datasets
ggc <- ggplot(data_animation_c, aes(LR.tend,FB.tend, color=true_class)) +
geom_jitter(width=0.1/obs_c, height=0.1/obs_c)+
xlim(-0.1,1.1)+
ylim(-0.1,1.1)+
labs(title = paste(n_subjects_c, 'Subjects and', obs_c, 'Observations' ))
print(ggc)
Sys.sleep(0.5)
}
}
n_subjects_sc = 200 # number of subjects for the scenarios
obs_per_trial_sc <- 2 # number of obs. per trial for the scenarios
# Easy_1
sc_name <- 'Easy_1'
class_dist_easy_1 <-
c( 1,  0,  0,  0,  1,
0,  0,  0,  0,  0,
0,  0,  0,  0,  0,
0,  0,  0,  0,  0,
1,  0,  0,  0,  1)
data_easy_1 <- gen_data(n_subjects_sc, obs_per_trial_sc, class_dist_easy_1)
ggplot(data_easy_1, aes(LR.tend,FB.tend, color=true_class)) +
geom_jitter(width=0.03, height=0.03)+
xlim(-0.1,1.1)+
ylim(-0.1,1.1)+
labs(title = sc_name)
# Easy_2
sc_name <- 'Easy_2'
class_dist_easy_2 <-
c( 0,  1,  0,  0,  0,
0,  0,  0,  0,  1,
0,  0,  0,  0,  0,
0,  0,  0,  0,  0,
0,  1,  0,  0,  0)
data_easy_2 <- gen_data(n_subjects_sc, obs_per_trial_sc, class_dist_easy_2)
ggplot(data_easy_2, aes(LR.tend,FB.tend, color=true_class)) +
geom_jitter(width=0.03, height=0.03)+
xlim(-0.1,1.1)+
ylim(-0.1,1.1)+
labs(title = sc_name)
# Easy_3
sc_name <- 'Easy_3'
class_dist_easy_3 <-
c( 0,  0,  1,  0,  0,
0,  0,  0,  0,  0,
1,  0,  0,  0,  1,
0,  0,  0,  0,  0,
0,  0,  1,  0,  0)
data_easy_3 <- gen_data(n_subjects_sc, obs_per_trial_sc, class_dist_easy_3)
ggplot(data_easy_3, aes(LR.tend,FB.tend, color=true_class)) +
geom_jitter(width=0.03, height=0.03)+
xlim(-0.1,1.1)+
ylim(-0.1,1.1)+
labs(title = sc_name)
# Easy_3
sc_name <- 'Easy_3'
class_dist_easy_3 <-
c( 0,  0,  1,  0,  0,
0,  0,  0,  0,  0,
1,  0,  1,  0,  1,
0,  0,  0,  0,  0,
0,  0,  1,  0,  0)
data_easy_3 <- gen_data(n_subjects_sc, obs_per_trial_sc, class_dist_easy_3)
ggplot(data_easy_3, aes(LR.tend,FB.tend, color=true_class)) +
geom_jitter(width=0.03, height=0.03)+
xlim(-0.1,1.1)+
ylim(-0.1,1.1)+
labs(title = sc_name)
sc_name <- 'Medium_1'
class_dist_medium_1 <-
c( 0,  1,  0,  0,  1,
0,  0,  0,  0,  0,
0,  0,  0,  0,  0,
0,  1,  0,  0,  1,
0,  0,  1,  0,  0)
data_medium_1 <- gen_data(n_subjects_sc, obs_per_trial_sc, class_dist_medium_1)
ggplot(data_medium_1, aes(LR.tend,FB.tend, color=true_class)) +
geom_jitter(width=0.03, height=0.03)+
xlim(-0.1,1.1)+
ylim(-0.1,1.1)+
labs(title = sc_name)
# medium_2
sc_name <- 'Medium_2'
class_dist_medium_2 <-
c( 0,  1,  0,  0,  1,
1,  0,  0,  1,  0,
0,  0,  0,  0,  0,
0,  0,  0,  0,  0,
1,  0,  1,  0,  1)
data_medium_2 <- gen_data(n_subjects_sc, obs_per_trial_sc, class_dist_medium_2)
ggplot(data_medium_2, aes(LR.tend,FB.tend, color=true_class)) +
geom_jitter(width=0.03, height=0.03)+
xlim(-0.1,1.1)+
ylim(-0.1,1.1)+
labs(title = sc_name)
a <- c(39,49,57,65,82,85,108,136,155,153,165,193,206,235,262)
plot(a)
plot(a)
abline(a)
line(a)
?line
b <- c(59,71,81,91,110,115,140,170,191,191,205,235,250,281,310)
plot(b)
c <- a/b
plot(c)
# Load necessary libraries
library(lme4)
library(blme)
install.packages("blme")
library(lme4)
library(blme)
library(ggplot2)
# Generate simulated data
set.seed(123)
n <- 100 # Number of observations
groups <- factor(rep(1:10, each = n/10)) # Simulated groups
# Simulate random intercepts and slopes
intercepts <- rnorm(10, mean = 0, sd = 1) # Simulated random intercepts
slopes <- rnorm(10, mean = 0, sd = 0.5)   # Simulated random slopes
# Simulate response variable
X <- rnorm(n)
Y <- intercepts[groups] + slopes[groups] * X + rnorm(n, mean = 0, sd = 1)
# Create a BLME model with random intercepts and slopes
blme_model <- blmer(Y ~ X + (X | groups))
# Extract posterior samples for random intercepts and slopes
posterior_samples <- posterior_samples(blme_model)
# Create a BLME model with random intercepts and slopes
blme_model <- blmer(Y ~ X + (X | groups))
# Extract posterior samples for random intercepts and slopes
posterior_samples <- posterior_samples(blme_model)
View(blme_model)
summary(blme_model)
# Extract posterior samples for random intercepts and slopes
posterior_samples <- posterior_samples(blme_model)
# Generate simulated data
set.seed(123)
n <- 100
groups <- factor(rep(1:10, each = n/10))
intercepts <- rnorm(10, mean = 0, sd = 1)
slopes <- rnorm(10, mean = 0, sd = 0.5)
X <- rnorm(n)
Y <- intercepts[groups] + slopes[groups] * X + rnorm(n, mean = 0, sd = 1)
# Create a BLME model with random intercepts and slopes
blme_model <- blmer(Y ~ X + (X | groups))
# Extract posterior means for coefficients (including random effects)
posterior_means <- coef(blme_model)
# Extract standard deviations for coefficients (including random effects)
posterior_sds <- attr(coef(blme_model, summary = FALSE), "postVar")
# Visualize the posterior distributions of random intercepts
ggplot(data.frame(RandomIntercept = rnorm(1000, posterior_means[2], posterior_sds[2])),
aes(x = RandomIntercept)) +
geom_density() +
labs(title = "Posterior Distribution of Random Intercepts")
library(lme4)
library(lmerTest)
library(ggplot2)
library(dplyr)
library(rstudioapi)
library(tidyr)
library(dplyr)
library(ggplot2)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
results <- read.csv('./analysis_data.csv')
results1 <- read.csv('./analysis_data1.csv')
results2 <- read.csv('./analysis_data2.csv')
results3 <- read.csv('./analysis_data3.csv')
grouped <- results %>%
group_by(scenario, obs_per_trial, n_subj, method)%>%
summarise(RI_mean = mean(RI), RI_sd = sd(RI), NMI_mean = mean(NMI), NMI_sd = sd(NMI), RIc_mean = mean(RIc), RIc_sd = sd(RIc), NMIc_mean = mean(NMIc), NMIc = sd(NMIc))
grouped$scenario <- factor(grouped$scenario)
grouped$obs_per_trial <- factor(grouped$obs_per_trial)
grouped$n_subj <- factor(grouped$n_subj)
grouped$method <- factor(grouped$method)
grouped1 <- results1 %>%
group_by(scenario, obs_per_trial, n_subj, method)%>%
summarise(RI_mean = mean(RI), RI_sd = sd(RI), NMI_mean = mean(NMI), NMI_sd = sd(NMI), RIc_mean = mean(RIc), RIc_sd = sd(RIc), NMIc_mean = mean(NMIc), NMIc = sd(NMIc))
grouped1['method'][grouped1['method'] == 'BMEM'] <- 'BMEM Gauss'
grouped1['method'][grouped1['method'] == 'GLM'] <- 'LMEM'
grouped1['method'][grouped1['method'] == 'LCA'] <- 'LCA 2'
grouped1$scenario <- factor(grouped1$scenario)
grouped1$obs_per_trial <- factor(grouped1$obs_per_trial)
grouped1$n_subj <- factor(grouped1$n_subj)
grouped1$method <- factor(grouped1$method)
grouped2 <- results2 %>%
group_by(scenario, obs_per_trial, n_subj, method)%>%
summarise(RI_mean = mean(RI), RI_sd = sd(RI), NMI_mean = mean(NMI), NMI_sd = sd(NMI), RIc_mean = mean(RIc), RIc_sd = sd(RIc), NMIc_mean = mean(NMIc), NMIc = sd(NMIc))
grouped2['method'][grouped1['method'] == 'LCA'] <- 'LCA 3'
grouped2$scenario <- factor(grouped2$scenario)
grouped2$obs_per_trial <- factor(grouped2$obs_per_trial)
grouped2$n_subj <- factor(grouped2$n_subj)
grouped2$method <- factor(grouped2$method)
grouped3 <- results3 %>%
group_by(scenario, obs_per_trial, n_subj, method)%>%
summarise(RI_mean = mean(RI), RI_sd = sd(RI), NMI_mean = mean(NMI), NMI_sd = sd(NMI), RIc_mean = mean(RIc), RIc_sd = sd(RIc), NMIc_mean = mean(NMIc), NMIc = sd(NMIc))
grouped3['method'][grouped1['method'] == 'LCA'] <- 'LCA 4'
grouped3$scenario <- factor(grouped3$scenario)
grouped3$obs_per_trial <- factor(grouped3$obs_per_trial)
grouped3$n_subj <- factor(grouped3$n_subj)
grouped3$method <- factor(grouped3$method)
m <- lm(RI_mean ~ n_subj, data=grouped)
summary(m)
df = rbind(grouped, grouped1, grouped2,grouped3)
ggplot(grouped, aes(x=obs_per_trial, y=RI_mean, color=method))+
geom_jitter(height = 0, width = 0.5)
ggplot(grouped, aes(x = obs_per_trial, y = RIc_mean, fill = method)) +
geom_boxplot()+
facet_wrap(~ scenario, ncol=3)
m1 <- lm(RI_mean ~ n_subj, data=grouped1)
summary(m1)
ggplot(grouped1, aes(x=obs_per_trial, y=RI_mean, color=method))+
geom_jitter(height = 0, width = 0.5)
ggplot(grouped1, aes(x = obs_per_trial, y = RIc_mean, fill = method)) +
geom_boxplot()+
facet_wrap(~ scenario, ncol=3)
ggplot(filter(df, method != 'LCA 2' & method != 'LCA 3'), aes(x = obs_per_trial, y = NMIc_mean, fill = method)) +
geom_boxplot()+
facet_wrap(~ scenario, ncol=3)+
ylab("NMIc")+
xlab("Observations per trial type")+
labs(fill='Method')
ggplot(filter(df, method != 'LCA 2'), aes(x = obs_per_trial, y = RIc_mean, fill = method)) +
geom_boxplot()+
facet_wrap(~ scenario, ncol=3)+
ylab("RIc")+
xlab("Observations per trial type")+
labs(fill='Method')
ggplot(filter(df, method != 'LCA 2'), aes(x = obs_per_trial, y = NMI_mean, fill = method)) +
geom_boxplot()+
facet_wrap(~ scenario, ncol=3)+
ylab("NMI")+
xlab("Observations per trial type")+
labs(fill='Method')
ggplot(filter(df, method != 'LCA 2'), aes(x = obs_per_trial, y = RI_mean, fill = method)) +
geom_boxplot()+
facet_wrap(~ scenario, ncol=3)+
ylab("RI")+
xlab("Observations per trial type")+
labs(fill='Method')
ggplot(filter(df, method != 'LCA 2' & method != 'LCA 3'), aes(x = obs_per_trial, y = NMIc_mean, fill = method)) +
geom_boxplot()+
facet_wrap(~ scenario, ncol=3)+
ylab("NMIc")+
xlab("Observations per trial type")+
labs(fill='Method')
