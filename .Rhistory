mutate('ego.tend' = rowSums(df)/(4*obs_per_trial))%>%
mutate('FB.tend' = rowSums(df[1:(2*obs_per_trial)])/(2*obs_per_trial))%>%
mutate('LR.tend' = rowSums(df[(2*obs_per_trial+1):(4*obs_per_trial)])/(2*obs_per_trial))
df$true_class <- factor(df$true_class)
return(df)
}
# The class centroids are on the FB-LR-trend graph are located like this
#
#    1  2  3  4  5
#    6  7  8  9 10
#   11 12 13 14 15
#   16 17 18 19 20
#   21 22 23 24 25
#
# Trying to recreate the class sizes from the experiment
#
class_dist <- c( 20,  4,  0,  3, 30,
4,  1,  0,  0,  0,
0,  0,  1,  0,  0,
5,  0,  0,  1,  0,
25,  2,  0,  0,  1)
# number of classes
sum(class_dist != 0)
# generate the data with numbers from the experiment
n_subjects = 150
obs_per_trial = 2
test_df <- gen_data(n_subjects, obs_per_trial, class_dist)
# Plot with true classes
ggplot(test_df, aes(LR.tend,FB.tend, color=true_class)) +
geom_jitter(width=0.05, height=0.05)+
xlim(-0.1,1.1)+
ylim(-0.1,1.1)
class_dist_animation <-
c( 0,  0,  1,  0,  0,
0,  1,  0,  1,  0,
0,  0,  1,  0,  0,
0,  1,  0,  1,  0,
0,  0,  1,  0,  0)
## Observations per trial
for (obs in c(1,2,4,10,20)){
data_animation_o <- gen_data(n_subjects, obs, class_dist_animation)
Sys.sleep(1) # give the cpu time to build the datasets
ggo <- ggplot(data_animation_o, aes(LR.tend,FB.tend, color=true_class)) +
geom_jitter(width=0.1/obs, height=0.1/obs)+
xlim(-0.1,1.1)+
ylim(-0.1,1.1)+
labs(title = paste(obs, 'Observation per trial'))
print(ggo)
Sys.sleep(0.5)
}
## Number of subjects
for (n_subjects_s in c(100, 200, 500, 1000)){
data_animation_s <- gen_data(n_subjects_s, obs_per_trial, class_dist_animation)
Sys.sleep(1) # give the cpu time to build the datasets
ggs <- ggplot(data_animation_s, aes(LR.tend,FB.tend, color=true_class)) +
geom_jitter(width=0.1/obs_per_trial, height=0.1/obs_per_trial)+
xlim(-0.1,1.1)+
ylim(-0.1,1.1)+
labs(title = paste(n_subjects, 'Subjects'))
print(ggs)
Sys.sleep(0.5)
}
## Combination of both
for (obs_c in c(1,2,5,10, 20)){
for (n_subjects_c in c(100, 200, 500, 1000, 2000)){
data_animation_c <- gen_data(n_subjects_c, obs_c, class_dist_animation)
Sys.sleep(1) # give the cpu time to build the datasets
ggc <- ggplot(data_animation_c, aes(LR.tend,FB.tend, color=true_class)) +
geom_jitter(width=0.1/obs_c, height=0.1/obs_c)+
xlim(-0.1,1.1)+
ylim(-0.1,1.1)+
labs(title = paste(n_subjects_c, 'Subjects and', obs_c, 'Observations' ))
print(ggc)
Sys.sleep(0.5)
}
}
n_subjects_sc = 200 # number of subjects for the scenarios
obs_per_trial_sc <- 2 # number of obs. per trial for the scenarios
# Easy_1
sc_name <- 'Easy_1'
class_dist_easy_1 <-
c( 1,  0,  0,  0,  1,
0,  0,  0,  0,  0,
0,  0,  0,  0,  0,
0,  0,  0,  0,  0,
1,  0,  0,  0,  1)
data_easy_1 <- gen_data(n_subjects_sc, obs_per_trial_sc, class_dist_easy_1)
ggplot(data_easy_1, aes(LR.tend,FB.tend, color=true_class)) +
geom_jitter(width=0.03, height=0.03)+
xlim(-0.1,1.1)+
ylim(-0.1,1.1)+
labs(title = sc_name)
# Easy_2
sc_name <- 'Easy_2'
class_dist_easy_2 <-
c( 0,  1,  0,  0,  0,
0,  0,  0,  0,  1,
0,  0,  0,  0,  0,
0,  0,  0,  0,  0,
0,  1,  0,  0,  0)
data_easy_2 <- gen_data(n_subjects_sc, obs_per_trial_sc, class_dist_easy_2)
ggplot(data_easy_2, aes(LR.tend,FB.tend, color=true_class)) +
geom_jitter(width=0.03, height=0.03)+
xlim(-0.1,1.1)+
ylim(-0.1,1.1)+
labs(title = sc_name)
# Easy_3
sc_name <- 'Easy_3'
class_dist_easy_3 <-
c( 0,  0,  1,  0,  0,
0,  0,  0,  0,  0,
1,  0,  0,  0,  1,
0,  0,  0,  0,  0,
0,  0,  1,  0,  0)
data_easy_3 <- gen_data(n_subjects_sc, obs_per_trial_sc, class_dist_easy_3)
ggplot(data_easy_3, aes(LR.tend,FB.tend, color=true_class)) +
geom_jitter(width=0.03, height=0.03)+
xlim(-0.1,1.1)+
ylim(-0.1,1.1)+
labs(title = sc_name)
# Easy_3
sc_name <- 'Easy_3'
class_dist_easy_3 <-
c( 0,  0,  1,  0,  0,
0,  0,  0,  0,  0,
1,  0,  1,  0,  1,
0,  0,  0,  0,  0,
0,  0,  1,  0,  0)
data_easy_3 <- gen_data(n_subjects_sc, obs_per_trial_sc, class_dist_easy_3)
ggplot(data_easy_3, aes(LR.tend,FB.tend, color=true_class)) +
geom_jitter(width=0.03, height=0.03)+
xlim(-0.1,1.1)+
ylim(-0.1,1.1)+
labs(title = sc_name)
sc_name <- 'Medium_1'
class_dist_medium_1 <-
c( 0,  1,  0,  0,  1,
0,  0,  0,  0,  0,
0,  0,  0,  0,  0,
0,  1,  0,  0,  1,
0,  0,  1,  0,  0)
data_medium_1 <- gen_data(n_subjects_sc, obs_per_trial_sc, class_dist_medium_1)
ggplot(data_medium_1, aes(LR.tend,FB.tend, color=true_class)) +
geom_jitter(width=0.03, height=0.03)+
xlim(-0.1,1.1)+
ylim(-0.1,1.1)+
labs(title = sc_name)
# medium_2
sc_name <- 'Medium_2'
class_dist_medium_2 <-
c( 0,  1,  0,  0,  1,
1,  0,  0,  1,  0,
0,  0,  0,  0,  0,
0,  0,  0,  0,  0,
1,  0,  1,  0,  1)
data_medium_2 <- gen_data(n_subjects_sc, obs_per_trial_sc, class_dist_medium_2)
ggplot(data_medium_2, aes(LR.tend,FB.tend, color=true_class)) +
geom_jitter(width=0.03, height=0.03)+
xlim(-0.1,1.1)+
ylim(-0.1,1.1)+
labs(title = sc_name)
a <- c(39,49,57,65,82,85,108,136,155,153,165,193,206,235,262)
plot(a)
plot(a)
abline(a)
line(a)
?line
b <- c(59,71,81,91,110,115,140,170,191,191,205,235,250,281,310)
plot(b)
c <- a/b
plot(c)
library(aricode)
library(fossil)
library(poLCA)
library(plyr)
library(dplyr)
library(data.table)
library(ggplot2)
library(tidyLPA)
library(lme4)
library(brms)
# Evaluation of a given dataset
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("dataset_generator.R")
sc1 <-
c( 1,  0,  0,  0,  1,
0,  0,  0,  0,  0,
0,  0,  0,  0,  0,
0,  0,  0,  0,  0,
1,  0,  0,  0,  1)
sc2 <-
c( 0,  1,  0,  0,  0,
0,  0,  0,  0,  1,
0,  0,  0,  0,  0,
1,  0,  0,  0,  0,
0,  0,  0,  1,  0)
sc3 <-
c( 0,  1,  0,  2,  0,
0,  0,  0,  0,  0,
0,  0,  0,  0,  0,
0,  0,  0,  0,  0,
0,  2,  0,  1,  0)
sc4 <-
c( 0,  0,  1,  0,  0,
0,  0,  0,  0,  0,
1,  0,  0,  0,  1,
0,  0,  0,  0,  0,
0,  0,  1,  0,  0)
sc5 <-
c( 0,  0,  0,  0,  0,
0,  1,  0,  1,  0,
0,  0,  0,  0,  0,
0,  1,  0,  1,  0,
0,  0,  0,  0,  0)
sc6 <-
c( 0,  0,  0,  0,  0,
0,  0,  0,  1,  0,
0,  0,  0,  0,  0,
0,  1,  0,  0,  0,
0,  0,  0,  0,  0)
sc7 <-
c( 1,  0,  0,  0,  0,
0,  0,  0,  0,  0,
0,  0,  1,  0,  0,
0,  0,  0,  0,  0,
0,  0,  0,  0,  1)
sc8 <-
c( 0,  0,  0,  0,  0,
0,  1,  0,  2,  0,
0,  0,  0,  0,  0,
0,  2,  0,  1,  0,
0,  0,  0,  0,  0)
sc9 <-
c( 1,  0,  0,  0,  5,
0,  0,  0,  0,  0,
0,  0,  0,  0,  0,
0,  1,  0,  0,  1,
5,  0,  0,  0,  5)
Sys.time()
time_id <- gsub(' ', '', gsub(':', '', gsub('-','',Sys.time())), fixed = TRUE)
scenarios <- list(sc1, sc2, sc3, sc4, sc5, sc6, sc7, sc8, sc9)
names(scenarios) <- c("sc1", "sc2", "sc3", "sc4", "sc5", "sc6", "sc7", "sc8", "sc9")
row.names = c("scenario", "obs_per_trial", "n_subj", "method", "class_true", "run", "class_pred", "RI", "RIc", "NMI", "NMIc", "warnings")
length(row.names)
measure_df = data.frame(matrix(ncol = length(row.names), nrow = 0))
names(measure_df) = row.names
folder = paste('./data/',time_id,"/", sep="")
if (!dir.exists(folder)) dir.create(folder, recursive = TRUE)
if (!file.exists(paste(folder,'./analysis_data.csv', sep=''))){
write.csv(measure_df, paste(folder,"analysis_data.csv", sep=''), row.names=FALSE)
}else{
var = readline(prompt = "File already exists. Override? (y/n) ")
if (var == 'y'){
write.csv(measure_df, paste(folder,"analysis_data.csv", sep=''), row.names=FALSE)
}else{
print("Creating backup")
backup <- read.csv(paste(folder,"analysis_data.csv", sep=''))
write.csv(backup, paste(paste(folder,"backup_analysis_data", sep=''),time_id,".csv",sep=''), row.names=FALSE)
write.csv(measure_df, paste(folder,"analysis_data.csv", sep=''), row.names=FALSE)
}
}
warn <- 'none'
scenario <- 4
obs_per_trial <- 4
n_subject <- 200
run <- 1
for (scenario in 3:3){
for (obs_per_trial in c(4,8)){
for (n_subject in c(100,200,400)){
for (run in 1:5){
sc_name <- names(scenarios)[scenario]
sc_dist <- scenarios[[scenario]]
filepath <- paste("./data/",time_id,"/",sc_name,"/obs",obs_per_trial,"/nSubj",n_subject,"/", sep="")
if (!dir.exists(filepath)) dir.create(filepath, recursive = TRUE)
msg <- paste("Scenario: ",sc_name,", Obs: ",obs_per_trial,", Subjects: ", n_subject, ", Run: ", run, sep = '')
print(msg)
measure_df <- read.csv(paste(folder,"analysis_data.csv", sep=""))
set.seed(3141+run)
data <- gen_data_FB_LR(n_subject, obs_per_trial, sc_dist)
# True number of classes
n_true <- length(levels(data$true_class))
# Number of obs. per trial
n_obs <- nrow(dplyr::filter(data, Subject == 1))/2
# order the data
data <- data[with(data, order(Subject, trial_type, own.cod)), ]
# extend to wide format and naming accordingly
name_vec <- c()
suffixes <- rep(seq(1:(n_obs)), 2)
for (elem in dplyr::filter(data, Subject == 1)[2]){
name_vec <- append(name_vec, elem)
}
for (i in 1:length(name_vec)){
name_vec[i] <- paste(name_vec[i],suffixes[i], sep="")
}
data_with_index <- ddply(data, .(Subject), mutate,
index = name_vec[1:length(Subject)])
df.LCA_id <- reshape2::dcast(data_with_index, Subject ~ index, value.var = 'own.cod')
# for poLCA we will need only the value column and no zero or negative values
df.LCA <- df.LCA_id %>%
dplyr::select(-Subject)%>%
mutate_if(is.character,as.numeric)
df.LCA <- df.LCA+1
formula_func <- function(colnms1, dat) {
fmla <- as.formula(paste0("cbind(",
paste(colnms1, collapse=","), ")", " ~ ", 1))
mva <- manova(fmla, data = dat)
mva$call <- fmla
mva
}
f <- as.formula(with(df.LCA, formula_func(colnames(df.LCA), df.LCA)))
bics <- c()
for (x in 1:6) {
lca_x <- poLCA(f, df.LCA, nclass = x, nrep = 10, verbose=FALSE)$bic
bics <- append(bics, lca_x)
}
opt_class <- which.min(bics)
ww <- c()
tryCatch(
withCallingHandlers(lca_3 <- poLCA(f, df.LCA, nclass = opt_class, nrep = 10, verbose=FALSE, graphs = FALSE), warning = function(w) ww <<- c(ww, list(w)))
)
lca_3 <- poLCA(f, df.LCA, nclass = opt_class, nrep = 10, verbose=FALSE, graphs = FALSE)
wlen <- length(ww)
ww <- unlist(ww)
if (wlen > 0) {
warn <- paste(wlen, " Warnings: ", paste(ww, collapse = '. Next warning: '), sep='')
} else {
warn <- 'none'
}
lca_tc <- poLCA(f, df.LCA, nclass = n_true, nrep = 10, verbose=FALSE, graphs = FALSE)
df.LCA_classes <- df.LCA_id %>%
mutate('lca.class' = factor(lca_3$predclass))%>%
mutate('lca.tc' = factor(lca_tc$predclass))%>%
dplyr::select(Subject, lca.class, lca.tc)
data <- left_join(data, df.LCA_classes, by="Subject")
by_subj_fb <- dplyr::filter(data, trial_type == 'FB') %>%
group_by(Subject) %>%
summarise(fb_tend = sum(own.cod)/n_obs)
by_subj_lr <- dplyr::filter(data, trial_type == 'LR') %>%
group_by(Subject) %>%
summarise(lr_tend = sum(own.cod)/n_obs)
data <- left_join(data, by_subj_fb, by="Subject")
data <- left_join(data, by_subj_lr, by="Subject")
# measure row for LCA
RI <- rand.index(as.numeric(data$true_class),as.numeric(data$lca.class))
NMI <- NMI(as.numeric(data$true_class),as.numeric(data$lca.class))
RIc <- rand.index(as.numeric(data$true_class),as.numeric(data$lca.tc))
NMIc <- NMI(as.numeric(data$true_class),as.numeric(data$lca.tc))
n_pred <- length(levels(data$lca.class))
mes_LCA <- c(sc_name, obs_per_trial, n_subject, 'LCA', n_true, run, n_pred, RI, RIc, NMI, NMIc, warn)
measure_df[nrow(measure_df)+1,] <- mes_LCA
## eval plot for lca
png(paste(filepath,'lca',run,'.png', sep=''))
lca_plot <- ggplot(data, aes(lr_tend,fb_tend, color=lca.class))+
geom_jitter(width=0.05, height=0.05, aes(shape=true_class))
Sys.sleep(0.5)
print(lca_plot)
dev.off()
png(paste(filepath,'lca_tc',run,'.png', sep=''))
lca_tc_plot <- ggplot(data, aes(lr_tend,fb_tend, color=lca.tc))+
geom_jitter(width=0.05, height=0.05, aes(shape=true_class))
print(lca_tc_plot)
Sys.sleep(0.5)
dev.off()
### lmem
ww <- c()
# original
# tryCatch(
#   withCallingHandlers(m0 <- glmer(own.cod ~ trial_type + (trial_type | Subject), data=data, family = binomial())
#                       , warning = function(w) ww <<- c(ww, list(w)))
# )
# Appendix with linear mixed effect model
tryCatch(
withCallingHandlers(m0 <- lmer(own.cod ~ trial_type + (trial_type | Subject), data=data)
, warning = function(w) ww <<- c(ww, list(w)))
)
wlen <- length(ww)
ww <- unlist(ww)
if (wlen > 0) {
warn <- paste(wlen, " Warnings: ", paste(ww, collapse = '. Next warning: '), sep='')
} else {
warn <- 'none'
}
coeffs <- coef(m0)$Subject
coeffs$FB <- coeffs$`(Intercept)`
coeffs$LR <- coeffs$`(Intercept)` + coeffs$trial_typeLR
ahp <- coeffs %>%
dplyr::select(FB, LR) %>%
single_imputation() %>%
estimate_profiles(1:6)%>%
compare_solutions(statistics=c("AIC", "BIC", "Entropy", "LogLik", "CLC", "KIC"))
lmem_mod <- coeffs %>%
dplyr::select(FB, LR) %>%
single_imputation() %>%
estimate_profiles(ahp$AHP)
lmem_tc <- coeffs %>%
dplyr::select(FB, LR) %>%
single_imputation() %>%
estimate_profiles(n_true)
lmem_class <- get_data(lmem_mod)$Class %>%
factor()
lmem_class_tc <- get_data(lmem_tc)$Class %>%
factor()
lmem_class <- data.frame(Subject = 1:length(lmem_class),lmem.class = lmem_class)
lmem_class$Subject <- factor(lmem_class$Subject)
lmem_class_tc <- data.frame(Subject = 1:length(lmem_class_tc),lmem.tc = lmem_class_tc)
lmem_class_tc$Subject <- factor(lmem_class_tc$Subject)
data$Subject <- factor(data$Subject)
data <- left_join(data, lmem_class, by="Subject")
data <- left_join(data, lmem_class_tc, by="Subject")
png(paste(filepath,'glm',run,'.png', sep=''))
glm_plot <- ggplot(data, aes(lr_tend,fb_tend, color=lmem.class))+
geom_jitter(width=0.05, height=0.05, aes(shape=true_class))
Sys.sleep(0.5)
print(glm_plot)
dev.off()
png(paste(filepath,'glm_tc',run,'.png', sep=''))
glm_tc_plot <- ggplot(data, aes(lr_tend,fb_tend, color=lmem.tc))+
geom_jitter(width=0.05, height=0.05, aes(shape=true_class))
print(glm_tc_plot)
Sys.sleep(0.5)
dev.off()
# measure for GMEM
RI <- rand.index(as.numeric(data$true_class),as.numeric(data$lmem.class))
NMI <- NMI(as.numeric(data$true_class),as.numeric(data$lmem.class))
RIc <- rand.index(as.numeric(data$true_class),as.numeric(data$lmem.tc))
NMIc<- NMI(as.numeric(data$true_class),as.numeric(data$lmem.tc))
n_pred <- length(levels(data$lmem.class))
mes_GLM <- c(sc_name, obs_per_trial, n_subject, 'GLM', n_true, run, n_pred, RI, RIc, NMI, NMIc, warn)
measure_df[nrow(measure_df)+1,] <- mes_GLM
#### BMEM analysis
ww <- c()
# original
# tryCatch(
#   withCallingHandlers(bm2 <- brm(data = data, own.cod ~ trial_type + (trial_type | Subject),
#                                  family = bernoulli(),
#                                  seed = 123,
#                                  cores = 8,
#                                  iter = 4000, warmup = 2000,
#                                  file = paste(filepath, 'bm', run, sep = ""))
#                       , warning = function(w) ww <<- c(ww, list(w)))
# )
# Appendix
tryCatch(
withCallingHandlers(bm2 <- brm(data = data, own.cod ~ trial_type + (trial_type | Subject),
seed = 123,
cores = 8,
iter = 4000, warmup = 2000,
file = paste(filepath, 'bm', run, sep = ""))
, warning = function(w) ww <<- c(ww, list(w)))
)
wlen <- length(ww)
ww <- unlist(ww)
if (wlen > 0) {
warn <- paste(wlen, " Warnings: ", paste(ww, collapse = '. Next warning: '), sep='')
} else {
warn <- 'none'
}
bmcoeff <- coef(bm2)$Subject
coeffs <- coeffs %>%
mutate("FB_bmr" = bmcoeff[1:nrow(bmcoeff),1,1]) %>%
mutate("LR_bmr" = bmcoeff[1:nrow(bmcoeff),1,1] + bmcoeff[1:nrow(bmcoeff),1,2])
ahp <- coeffs %>%
dplyr::select(FB_bmr, LR_bmr) %>%
single_imputation() %>%
estimate_profiles(1:6)%>%
compare_solutions(statistics=c("AIC", "BIC", "Entropy", "LogLik"))
bm_mod <- coeffs %>%
dplyr::select(FB_bmr, LR_bmr) %>%
single_imputation() %>%
estimate_profiles(ahp$AHP)
bm_mod_tc <- coeffs %>%
dplyr::select(FB_bmr, LR_bmr) %>%
single_imputation() %>%
estimate_profiles(n_true)
bm_class_tc <- get_data(bm_mod_tc)$Class %>%
factor()
bm_class <- get_data(bm_mod)$Class %>%
factor()
bm_class <- data.frame(Subject = 1:length(bm_class),bm.class = bm_class)
bm_class$Subject <- factor(bm_class$Subject)
bm_class_tc <- data.frame(Subject = 1:length(bm_class_tc),bm.tc = bm_class_tc)
bm_class_tc$Subject <- factor(bm_class_tc$Subject)
data <- left_join(data, bm_class, by="Subject")
data <- left_join(data, bm_class_tc, by="Subject")
## plot BM
png(paste(filepath,'bm',run,'.png', sep=''))
plot_bm <- ggplot(data, aes(lr_tend,fb_tend, color=bm.class))+
geom_jitter(width=0.05, height=0.05, aes(shape=true_class))
print(plot_bm)
Sys.sleep(0.5)
dev.off()
png(paste(filepath,'bm_tc',run,'.png', sep=''))
plot_tc_bm <- ggplot(data, aes(lr_tend,fb_tend, color=bm.tc))+
geom_jitter(width=0.05, height=0.05, aes(shape=true_class))
print(plot_tc_bm)
Sys.sleep(0.5)
dev.off()
# measure for BMEM
RI <- rand.index(as.numeric(data$true_class),as.numeric(data$bm.class))
NMI <- NMI(as.numeric(data$true_class),as.numeric(data$bm.class))
RIc <- rand.index(as.numeric(data$true_class),as.numeric(data$bm.tc))
NMIc <- NMI(as.numeric(data$true_class),as.numeric(data$bm.tc))
n_pred <- length(levels(data$bm.class))
mes_BM <- c(sc_name, obs_per_trial, n_subject, 'BMEM', n_true, run, n_pred, RI, RIc, NMI, NMIc, warn)
measure_df[nrow(measure_df)+1,] <- mes_BM
write.csv(data, paste(filepath,"run",run,".csv", sep=""), row.names=FALSE)
write.csv(measure_df, paste(folder,"analysis_data.csv", sep=''), row.names=FALSE)
}
}
}
}
