# With OPT score on the other hand:
ggplot(df, aes(fb_tend, lr_tend, color=opt))+
geom_jitter(width=0.1, height=0.1)+
scale_colour_gradientn(colours=rainbow(4))
# Visually we get ideas about the distribution of OPT scores and tendencies.
# Subjects with good OPT score (lower) seem to prefer othercentric views, while
# worse OPT score subjects tend to LR-egocentrism. The class of pure egocentric
# subjects has a mixture of OPT scores.
# Indifferent/random or FB egocentric subjects are not common at all.
## 4.2 LPA for individual differences
# Based on AHP a 4 Class model is the best choice
df %>%
dplyr::select(aq, opt, stroop) %>%
single_imputation() %>%
estimate_profiles(1:5)%>%
compare_solutions(statistics=c("AIC", "BIC", "Entropy", "LogLik"))
# No clear separation of classes was found. The classes are mostly governed by
# OPT score that is relatively good separated into 2 classes (1+2 and 3+4).
df %>%
dplyr::select(aq, opt, stroop) %>%
scale() %>%
estimate_profiles(4) %>%
plot_profiles()
# 2 classes had also the best BIC value and looks much more fitting for OPT.
# The other scores seem to not fit very well to any class though.
df %>%
dplyr::select(aq, opt, stroop) %>%
scale() %>%
estimate_profiles(2) %>%
plot_profiles()
# LPA for 2 and 4 classes
LPA_2 <- df %>%
dplyr::select(aq, opt, stroop) %>%
single_imputation() %>%
estimate_profiles(2)
classes_2 <- get_data(LPA_2)$Class %>%
factor()
LPA_3 <- df %>%
dplyr::select(aq, opt, stroop) %>%
single_imputation() %>%
estimate_profiles(3)
classes_3 <- get_data(LPA_3)$Class %>%
factor()
LPA_4 <- df %>%
dplyr::select(aq, opt, stroop) %>%
single_imputation() %>%
estimate_profiles(4)
classes_4 <- get_data(LPA_4)$Class %>%
factor()
df_LPA_classes <- df %>%
mutate('class_2' = classes_2, 'class_3'=classes_3, 'class_4'=classes_4)
# 2 classes plot, resembles tendencies plot from 4.1
ggplot(df_LPA_classes, aes(fb_tend, lr_tend, color=class_2))+
geom_jitter(width=0.1, height=0.1)
# 3 classes plot
ggplot(df_LPA_classes, aes(fb_tend, lr_tend, color=class_3))+
geom_jitter(width=0.1, height=0.1)
# 4 classes plot
ggplot(df_LPA_classes, aes(fb_tend, lr_tend, color=class_4))+
geom_jitter(width=0.1, height=0.1)
# The classes of individual differences don't provide a good
# clustering. Based on the weak correlations this is no surprise.
#### 5 LCA for perspective preference
# 5.1 transforming data to fit LCA
trails_diff <- clean_ex %>%
filter(clean_ex$perspective == 'different')
# Different number of trails for subjects make an LCA encoding hard.
# 28 of 153 participant did not complete all different perspective 8 trails.
# LCA uses categorical data, so using the tendencies is not possible.
count(trails_diff, workerID, sort=TRUE)
# filtering only workers who completed all 8 tasks
tasks_comp <- count(trails_diff, workerID, sort=TRUE) %>%
filter(n==8)%>%
dplyr::select(workerID)
trails_comp <- trails_diff %>%
filter(workerID %in% tasks_comp$workerID) %>%
dplyr::select(workerID, targetPos, other.cod)
# make sure every targetPos has 2 entries for each subject
trails_comp %>%
group_by(workerID) %>%
count(targetPos) %>%
filter(n != 2)
# order by workerID and then tragetPos
tc_ordered <- trails_comp[with(trails_comp, order(workerID, targetPos)), ]
# extend to wide format and naming accordingly
data_with_index <- ddply(tc_ordered, .(workerID), mutate,
index = c('B1','B2','F1','F2','L1','L2','R1','R2')[1:length(workerID)])
df.LCA_id <- dcast(data_with_index, workerID ~ index, value.var = 'other.cod')
# for poLCA we will need only the value column and no zero or negative values
df.LCA <- df.LCA_id %>%
dplyr::select(-workerID)
df.LCA <- df.LCA+1
f <- with(df.LCA, cbind(B1, B2, F1, F2, L1, L2, R1, R2)~1)
bics <- c()
for (x in 1:8) {
lca_x <- poLCA(f, df.LCA, nclass = x, nrep = 10, verbose=FALSE)$bic
bics <- append(bics, paste("Classes:",x, "BIC:", lca_x))
}
# 3 Class model with the best BIC
bics
# printing output and graph
lca_3 <- poLCA(f, df.LCA, nclass = 5, nrep = 50, graphs = TRUE)
df.LCA_id_class <- df.LCA_id %>%
mutate('lca.class' = factor(lca_3$predclass))%>%
dplyr::select(workerID, lca.class)
responders <- clean_ex %>%
dplyr::select(workerID, responderType)%>%
distinct()%>%
filter(workerID %in% df.LCA_id_class$workerID)
lca_tend <- df %>%
filter(workerID %in% df.LCA_id_class$workerID) %>%
merge(df.LCA_id_class, by='workerID',all.x=TRUE)%>%
merge(responders, by='workerID', all.x=TRUE)
# LCA could retrieve the tendencies ...
ggplot(lca_tend, aes(fb_tend, lr_tend, color=lca.class))+
geom_jitter(width=0.1, height=0.1)
# and it matches almost to the clusters in LPA for rate of egocentrism
# from the experiment paper
ggplot(lca_tend, aes(fb_tend, lr_tend, color=responderType))+
geom_jitter(width=0.1, height=0.1)
## Creating a class probability distributions
# The underlying probabilities for a subject of a certain class, to choose ego-
# centric for front-back and. Each list entry represents a class and works as follows:
# c( P(egocentric|FB), P(egocentric|LR) )
low <- 0.02
mid <- 0.5
high <- 0.98
class_prob <- list(c(low, low),c(low, mid), c(low, high),
c(mid, low), c(mid, mid), c(mid, high),
c(high, low), c(high, mid), c(high, high))
# Trying to recreate the class sizes from the experiment
class_dist <- c(50,  1,  1,  1,  1,  1,  50,  1, 50)
# generate the data
n_subjects = 100
obs_per_trial = 100
test_df <- gen_data(n_subjects, obs_per_trial, class_dist, class_prob)
# Plot with true classes
ggplot(test_df, aes(LR.tend,FB.tend, color=true_class)) +
geom_jitter()
library(dplyr)
library(ggplot2)
make_subj <- function(class, obs_per_trial) {
# creates a subject of a given class and with number obs_per_trial for each targetPos
subj <- c()
nam <- c()
for (pos in c('B', 'F', 'L', 'R')){
p1 <- class_prob[[class]][1]
p2 <- class_prob[[class]][2]
prob <- ifelse(pos == 'B' | pos == 'F', p1, p2)
for (i in 1:obs_per_trial){
vec <- rbinom(1, 1,prob)
nam <- cbind(nam, paste(pos,i,sep = ""))
subj <- cbind(subj,vec)
}
}
subj <- cbind(subj, class)
nam <- cbind(nam, 'true_class')
colnames(subj)<- nam
return(subj)
}
gen_data <- function(size, obs_per_trial, c_dist, c_prob){
# generate the data with given parameters and adds a column true class
# size : how many subjects will be generated
# obs_per_trial : how many trails from the same perspective for each subject
# c_dist : Probability-list of subject being in a certain class (influences number points per cluster)
# c_prob : probabilities for egocentric choice for the classes (influences where the clusters are)
c_dist <- c_dist/sum(c_dist)
subject_classes <- sample(seq(9) , size, replace=TRUE, prob=c_dist)
df <- data.frame(matrix(ncol = 4*obs_per_trial, nrow = 0))
for (class in subject_classes){
subj <- make_subj(class, obs_per_trial)
#subj <- c(subj, class)
df <- rbind(df,subj)
}
df<- df %>%
mutate('ego.tend' = rowSums(df)/(4*obs_per_trial))%>%
mutate('FB.tend' = rowSums(df[1:(2*obs_per_trial)])/(2*obs_per_trial))%>%
mutate('LR.tend' = rowSums(df[(2*obs_per_trial+1):(4*obs_per_trial)])/(2*obs_per_trial))
df$true_class <- factor(df$true_class)
return(df)
}
## Creating a class probability distributions
# The underlying probabilities for a subject of a certain class, to choose ego-
# centric for front-back and. Each list entry represents a class and works as follows:
# c( P(egocentric|FB), P(egocentric|LR) )
low <- 0.02
mid <- 0.5
high <- 0.98
class_prob <- list(c(low, low),c(low, mid), c(low, high),
c(mid, low), c(mid, mid), c(mid, high),
c(high, low), c(high, mid), c(high, high))
# Class distribution reflect the proportion or size of the classes in the population
# class_dist will be scaled later so can also be of ratio (1,1,1,1,2,2,2,2,4) <-
# Classes 5,6,7 or 8 have on average double the amount of subjects of classes 1,2,3 or 4
# Class 9 is 4 times as big as classes 1,2,3 or 4
# Trying to recreate the class sizes from the experiment
class_dist <- c(50,  1,  1,  1,  1,  1,  50,  1, 50)
# The class centroids are on the LR-FB-trend graph located like this
#   7 8 9
#   4 5 6
#   1 2 3
# generate the data
n_subjects = 100
obs_per_trial = 100
test_df <- gen_data(n_subjects, obs_per_trial, class_dist, class_prob)
# Plot with true classes
ggplot(test_df, aes(LR.tend,FB.tend, color=true_class)) +
geom_jitter()
obs_per_trial = 2
test_df <- gen_data(n_subjects, obs_per_trial, class_dist, class_prob)
# Plot with true classes
ggplot(test_df, aes(LR.tend,FB.tend, color=true_class)) +
geom_jitter()
# generate the data
n_subjects = 120
obs_per_trial = 2
test_df <- gen_data(n_subjects, obs_per_trial, class_dist, class_prob)
# Plot with true classes
ggplot(test_df, aes(LR.tend,FB.tend, color=true_class)) +
geom_jitter()
# Plot with true classes
ggplot(test_df, aes(LR.tend,FB.tend, color=true_class)) +
geom_jitter(width=0.1, height=0.1)
# Plot with true classes
ggplot(test_df, aes(FB.tend,LR.tend, color=true_class)) +
geom_jitter(width=0.1, height=0.1)
# Trying to recreate the class sizes from the experiment
class_dist <- c(10,  1,  1,  1,  1,  1,  10,  1, 10)
# generate the data
n_subjects = 120
obs_per_trial = 2
test_df <- gen_data(n_subjects, obs_per_trial, class_dist, class_prob)
# Plot with true classes
ggplot(test_df, aes(FB.tend,LR.tend, color=true_class)) +
geom_jitter(width=0.05, height=0.05)
# Trying to recreate the class sizes from the experiment
class_dist <- c(10,  1,  1,  1,  1,  1,  1,  1, 1)
# generate the data
n_subjects = 120
obs_per_trial = 2
test_df <- gen_data(n_subjects, obs_per_trial, class_dist, class_prob)
# Plot with true classes
ggplot(test_df, aes(FB.tend,LR.tend, color=true_class)) +
geom_jitter(width=0.05, height=0.05)
# Trying to recreate the class sizes from the experiment
class_dist <- c(1,  10,  1,  1,  1,  1,  1,  1, 10)
# generate the data
n_subjects = 120
obs_per_trial = 2
test_df <- gen_data(n_subjects, obs_per_trial, class_dist, class_prob)
# Plot with true classes
ggplot(test_df, aes(FB.tend,LR.tend, color=true_class)) +
geom_jitter(width=0.05, height=0.05)
# generate the data
n_subjects = 120
obs_per_trial = 100
test_df <- gen_data(n_subjects, obs_per_trial, class_dist, class_prob)
# Plot with true classes
ggplot(test_df, aes(FB.tend,LR.tend, color=true_class)) +
geom_jitter(width=0.05, height=0.05)
# generate the data
n_subjects = 1200
obs_per_trial = 100
test_df <- gen_data(n_subjects, obs_per_trial, class_dist, class_prob)
# Plot with true classes
ggplot(test_df, aes(FB.tend,LR.tend, color=true_class)) +
geom_jitter(width=0.05, height=0.05)
# Trying to recreate the class sizes from the experiment
class_dist <- c(2, 1, 1, 1, 1, 1, 1, 1, 1)
# generate the data
n_subjects = 1200
obs_per_trial = 100
test_df <- gen_data(n_subjects, obs_per_trial, class_dist, class_prob)
# Plot with true classes
ggplot(test_df, aes(FB.tend,LR.tend, color=true_class)) +
geom_jitter(width=0.05, height=0.05)
# Trying to recreate the class sizes from the experiment
class_dist <- c(2, 1, 1, 1, 1, 1, 1, 1, 1)
# generate the data
n_subjects = 200
obs_per_trial = 100
test_df <- gen_data(n_subjects, obs_per_trial, class_dist, class_prob)
# Plot with true classes
ggplot(test_df, aes(FB.tend,LR.tend, color=true_class)) +
geom_jitter(width=0.05, height=0.05)
# Trying to recreate the class sizes from the experiment
class_dist <- c(1, 10, 1, 1, 1, 1, 1, 1, 1)
# generate the data
n_subjects = 200
obs_per_trial = 100
test_df <- gen_data(n_subjects, obs_per_trial, class_dist, class_prob)
# Plot with true classes
ggplot(test_df, aes(FB.tend,LR.tend, color=true_class)) +
geom_jitter(width=0.05, height=0.05)
# Trying to recreate the class sizes from the experiment
class_dist <- c(1, 1, 10, 1, 1, 1, 1, 1, 1)
# generate the data
n_subjects = 200
obs_per_trial = 100
test_df <- gen_data(n_subjects, obs_per_trial, class_dist, class_prob)
# Plot with true classes
ggplot(test_df, aes(FB.tend,LR.tend, color=true_class)) +
geom_jitter(width=0.05, height=0.05)
# Trying to recreate the class sizes from the experiment
class_dist <- c(1, 1, 1, 10, 1, 1, 1, 1, 1)
# generate the data
n_subjects = 200
obs_per_trial = 100
test_df <- gen_data(n_subjects, obs_per_trial, class_dist, class_prob)
# Plot with true classes
ggplot(test_df, aes(FB.tend,LR.tend, color=true_class)) +
geom_jitter(width=0.05, height=0.05)
# Trying to recreate the class sizes from the experiment
class_dist <- c(1, 1, 1, 1, 10, 1, 1, 1, 1)
# generate the data
n_subjects = 200
obs_per_trial = 100
test_df <- gen_data(n_subjects, obs_per_trial, class_dist, class_prob)
# Plot with true classes
ggplot(test_df, aes(FB.tend,LR.tend, color=true_class)) +
geom_jitter(width=0.05, height=0.05)
# Trying to recreate the class sizes from the experiment
class_dist <- c(1, 1, 1, 1, 1, 10, 1, 1, 1)
# generate the data
n_subjects = 200
obs_per_trial = 100
test_df <- gen_data(n_subjects, obs_per_trial, class_dist, class_prob)
# Plot with true classes
ggplot(test_df, aes(FB.tend,LR.tend, color=true_class)) +
geom_jitter(width=0.05, height=0.05)
# Trying to recreate the class sizes from the experiment
class_dist <- c(1, 1, 1, 1, 1, 1, 10, 1, 1)
# generate the data
n_subjects = 200
obs_per_trial = 100
test_df <- gen_data(n_subjects, obs_per_trial, class_dist, class_prob)
# Plot with true classes
ggplot(test_df, aes(FB.tend,LR.tend, color=true_class)) +
geom_jitter(width=0.05, height=0.05)
# Trying to recreate the class sizes from the experiment
class_dist <- c(1, 1, 1, 1, 1, 1, 1, 10, 1)
# generate the data
n_subjects = 200
obs_per_trial = 100
test_df <- gen_data(n_subjects, obs_per_trial, class_dist, class_prob)
# Plot with true classes
ggplot(test_df, aes(FB.tend,LR.tend, color=true_class)) +
geom_jitter(width=0.05, height=0.05)
# Trying to recreate the class sizes from the experiment
class_dist <- c(1, 1, 1, 1, 1, 1, 1, 1, 1)
# and it matches almost to the clusters in LPA for rate of egocentrism
# from the experiment paper
ggplot(lca_tend, aes(fb_tend, lr_tend, color=responderType))+
geom_jitter(width=0.1, height=0.1)
# Trying to recreate the class sizes from the experiment
class_dist <- c(1, 1, 1, 1, 1, 1, 1, 1, 1)
# generate the data
n_subjects = 200
obs_per_trial = 100
test_df <- gen_data(n_subjects, obs_per_trial, class_dist, class_prob)
# Plot with true classes
ggplot(test_df, aes(FB.tend,LR.tend, color=true_class)) +
geom_jitter(width=0.05, height=0.05)
## Creating a class probability distributions
# The underlying probabilities for a subject of a certain class, to choose ego-
# centric for front-back and. Each list entry represents a class and works as follows:
# c( P(egocentric|FB), P(egocentric|LR) )
low <- 0.02
mid <- 0.5
high <- 0.98
class_prob <- list(c(low, low),c(low, mid), c(low, high),
c(mid, low), c(mid, mid), c(mid, high),
c(high, low), c(high, mid), c(high, high))
# Trying to recreate the class sizes from the experiment
#               1   2   3   4   5   6   7   8   9
class_dist <- c(10, 10, 2, 0 , 10, 0 , 0 , 0 , 10)
# generate the data
n_subjects = 200
obs_per_trial = 100
test_df <- gen_data(n_subjects, obs_per_trial, class_dist, class_prob)
# Plot with true classes
ggplot(test_df, aes(FB.tend,LR.tend, color=true_class)) +
geom_jitter(width=0.05, height=0.05)
obs_per_trial = 2
test_df <- gen_data(n_subjects, obs_per_trial, class_dist, class_prob)
# Plot with true classes
ggplot(test_df, aes(FB.tend,LR.tend, color=true_class)) +
geom_jitter(width=0.05, height=0.05)
# Trying to recreate the class sizes from the experiment
#               1   2   3   4   5   6   7   8   9
class_dist <- c(10, 1 , 5,  0 , 1,  0 , 0 , 0 , 10)
# generate the data
n_subjects = 200
obs_per_trial = 2
test_df <- gen_data(n_subjects, obs_per_trial, class_dist, class_prob)
# Plot with true classes
ggplot(test_df, aes(FB.tend,LR.tend, color=true_class)) +
geom_jitter(width=0.05, height=0.05)
View(trails_diff)
View(df_LPA_classes)
View(df.LCA)
View(df)
View(df)
# We can also look at the proportion of tendencies
df %>%
count(fb_tend)
df %>%
count(lr_tend)
View(tasks_comp)
View(tc_ordered)
# We can also look at the proportion of tendencies
df %>%
dplyr::select(workerID %in% tasks_comp)%>%
count(fb_tend)
View(tasks_comp)
# We can also look at the proportion of tendencies
df %>%
dplyr::select(workerID %in% tasks_comp$workerID)%>%
count(fb_tend)
# We can also look at the proportion of tendencies
df %>%
dplyr::filter(workerID %in% tasks_comp$workerID)%>%
count(fb_tend)
df %>%
dplyr::filter(workerID %in% tasks_comp$workerID)%>%
count(lr_tend)
# LCA could retrieve the tendencies ...
ggplot(lca_tend, aes(fb_tend, lr_tend, color=lca.class))+
geom_jitter(width=0.1, height=0.1)
# Trying to recreate the class sizes from the experiment
#               1   2   3   4   5   6   7   8   9
class_dist <- c(10, 3 , 12,  0 , 1,  2 , 0 , 0 , 10)
# generate the data
n_subjects = 200
obs_per_trial = 2
test_df <- gen_data(n_subjects, obs_per_trial, class_dist, class_prob)
# Plot with true classes
ggplot(test_df, aes(FB.tend,LR.tend, color=true_class)) +
geom_jitter(width=0.05, height=0.05)
# Trying to recreate the class sizes from the experiment
#               1   2   3   4   5   6   7   8   9
class_dist <- c(10, 3 , 12,  0 , 1,  1 , 0 , 0 , 10)
# generate the data
n_subjects = 200
obs_per_trial = 2
test_df <- gen_data(n_subjects, obs_per_trial, class_dist, class_prob)
# Plot with true classes
ggplot(test_df, aes(FB.tend,LR.tend, color=true_class)) +
geom_jitter(width=0.05, height=0.05)
# and it matches almost to the clusters in LPA for rate of egocentrism
# from the experiment paper
ggplot(lca_tend, aes(fb_tend, lr_tend, color=responderType))+
geom_jitter(width=0.1, height=0.1)
# Plot with true classes
ggplot(test_df, aes(FB.tend,LR.tend, color=true_class)) +
geom_jitter(width=0.05, height=0.05)
# generate the data
n_subjects = 120
obs_per_trial = 2
test_df <- gen_data(n_subjects, obs_per_trial, class_dist, class_prob)
# Plot with true classes
ggplot(test_df, aes(FB.tend,LR.tend, color=true_class)) +
geom_jitter(width=0.05, height=0.05)
# Trying to recreate the class sizes from the experiment
#               1   2   3   4   5   6   7   8   9
class_dist <- c(10, 3 , 12,  1 , 1,  1 , 1 , 1 , 10)
# generate the data
n_subjects = 120
obs_per_trial = 2
test_df <- gen_data(n_subjects, obs_per_trial, class_dist, class_prob)
# Plot with true classes
ggplot(test_df, aes(FB.tend,LR.tend, color=true_class)) +
geom_jitter(width=0.05, height=0.05)
# Trying to recreate the class sizes from the experiment
#               1   2   3   4   5   6   7   8   9
class_dist <- c(10, 3 , 12,  1 , 1,  1 , 0.5 , 0.5 , 10)
# generate the data
n_subjects = 120
obs_per_trial = 2
test_df <- gen_data(n_subjects, obs_per_trial, class_dist, class_prob)
# Plot with true classes
ggplot(test_df, aes(FB.tend,LR.tend, color=true_class)) +
geom_jitter(width=0.05, height=0.05)
obs_per_trial = 4
test_df <- gen_data(n_subjects, obs_per_trial, class_dist, class_prob)
# Plot with true classes
ggplot(test_df, aes(FB.tend,LR.tend, color=true_class)) +
geom_jitter(width=0.05, height=0.05)
obs_per_trial = 8
test_df <- gen_data(n_subjects, obs_per_trial, class_dist, class_prob)
# Plot with true classes
ggplot(test_df, aes(FB.tend,LR.tend, color=true_class)) +
geom_jitter(width=0.05, height=0.05)
obs_per_trial = 10
test_df <- gen_data(n_subjects, obs_per_trial, class_dist, class_prob)
# Plot with true classes
ggplot(test_df, aes(FB.tend,LR.tend, color=true_class)) +
geom_jitter(width=0.05, height=0.05)
# Plot with true classes
ggplot(test_df, aes(FB.tend,LR.tend, color=true_class)) +
geom_jitter(width=0.01, height=0.01)
# Plot with true classes
ggplot(test_df, aes(FB.tend,LR.tend, color=true_class)) +
geom_jitter(width=0.02, height=0.02)
obs_per_trial = 2
test_df <- gen_data(n_subjects, obs_per_trial, class_dist, class_prob)
# Plot with true classes
ggplot(test_df, aes(FB.tend,LR.tend, color=true_class)) +
geom_jitter(width=0.02, height=0.02)
# Plot with true classes
ggplot(test_df, aes(FB.tend,LR.tend, color=true_class)) +
geom_jitter(width=0.05, height=0.05)
